#### 175. Combine Two Tables
##### Method 1.
Select p1.FirstName, p1.LastName, IFNULL(a1.City,null) As City, IFNULL(a1.State,null) As State
From Person p1 Left Join Address a1 Using(PersonId);
###### Null value-regardless if there is an address for each of those people


#### 176. Second Highest Salary
##### Method 1.
With cte As
(Select*, Dense_Rank() Over (Order By Salary DESC) As rnk
From Employee)
 
Select Max(Salary) As SecondHighestSalary
From cte
Where rnk=2
 
##### Method 2.
Select Max(Salary) As SecondHighestSalary
From Employee
Where Salary not in (Select Max(Salary) From Employee);
 
##### Method 3.
Select Max(Salary) As SecondHighestSalary
From Employee
Where Salary < (Select Max(Salary) From Employee);


#### 181. Employees Earning More Than Their Managers
##### Method 1.
Select e1.Name As Employee
From Employee e1, Employee e2
Where e1.ManagerId = e2.Id 
And e1.Salary > e2.Salary;

##### Method 2. Inner Join
Select e1.Name As Employee 
From Employee e1 Inner Join Employee e2
On e1.ManagerId = e2.Id 
Where e1.Salary > e2.Salary;


#### 182. Duplicate Emails
##### Method 1. Window Function
With cte As
(Select Email, Count(*) As num
From Person
Group By Email)

Select Email
From cte
Where num >1;

##### Method 2. 
Select Email
From (Select Email, Count(*) As num
From Person
Group By Email) As p1
Where num >1;

##### Method 3.
Select Email
From Person
Group By Email
Having Count(*)>1;


#### 183. Customers Who Never Order
##### Method 1. NOT IN
Select Name As Customers
From Customers
Where Id NOT IN (Select CustomerID From Orders);

##### Method 2. IS NULL
Select Name As Customers
From Customers c1 Left Join Orders o1
On c1.Id = o1.CustomerId
Where CustomerId IS NULL;



#### 196. Delete Duplicate Emails
##### Method 1. Delete & Where
Delete p1 
From Person p1, Person p2
Where p1.Email = p2.Email 
And p1.Id > p2.Id;

##### Method 2. Delete & Join
Delete p1 
From Person p1 Join Person p2
On p1.Email = p2.Email 
And p1.Id > p2.Id;



#### 197. Rising Temperature
##### Method 1. DateDiff(a,b)
Select w2.id
From Weather w1, Weather w2
Where DateDiff(w2.recordDate,w1.recordDate)=1 #w2-w1=1, 以w2為主
And w2.Temperature > w1.Temperature;

##### Method 2. Join & On 
Select w2.id
From Weather w1 Join Weather w2 
On DateDiff(w2.recordDate,w1.recordDate)=1
And w2.Temperature > w1.Temperature;


#### 511. Game Play Analysis I
##### Method 1. window function
With cte As
(Select*, Rank() Over (Partition By player_id Order By event_date ASC) As rnk
From Activity)

Select player_id, event_date As first_login
From cte
Where rnk=1;

##### Method 2.
Select player_id, Min(event_date) As first_login
From Activity
Group By player_id;



#### 512. Game Play Analysis II
##### Method 1. window function
With cte As
(Select*, Rank() Over (Partition By player_id Order By event_date ASC) As rnk
From Activity)

Select player_id, device_id
From cte
Where rnk=1;

##### Method 2. subquery, where xxx In <faster than 84.72%>
Select player_id, device_id
From Activity 
Where (player_id,event_date) In (Select player_id, Min(event_date) As event_date
                                 From Activity
                                 Group By player_id);

#### 577. Employee Bonus
##### Method 1. IfNull(), IS NULL
Select name, IfNull(bonus,null) As bonus
From Employee e1 Left Join Bonus b1 Using (empId)
Where bonus < 1000 Or bonus IS NULL;

##### Method 2. IfNull() in where
Select name, bonus
From Employee e1 Left Join Bonus b1 Using (empId)
Where IFNULL(bonus,0)<1000;





#### 584. Find Customer Referee
##### Method 1. Where IFnull() <508 ms>
Select name
From customer
Where IfNull(referee_id,0) != 2;
##### Method 2. OR, IS NULL
Select name
From customer
Where referee_id != 2 Or referee_id IS NULL;

##### Method 3. Not In with subquery
Select name
From customer
Where id Not In (Select id From customer Where referee_id=2)


#### 586. Customer Placing the Largest Number of Orders
##### Method 1. Order By count(*) <369 ms>
Select customer_number
From Orders
Group By customer_number
Order By Count(order_number) Desc
Limit 1;


##### Method 2. Subquery - can change to cte but using more runtime than subquery, dense_rank
Select customer_number
From
(Select customer_number, 
Dense_Rank() Over (Order By Count(order_number) Desc) As rnk
From Orders
Group By customer_number) As o1
Where rnk=1;




#### 595. Big Countries
##### Method 1.
Select name, population, area
From World
Where population > 25000000 Or area > 3000000;

##### Method 2. Union
Select name, population, area
From World
Where population > 25000000
Union
Select name, population, area
From World
Where area > 3000000;


#### 596. Classes More Than 5 Students
##### Method 1. Use subquery <240 ms, 82%>
Select class 
From
(Select class, Count(Distinct student) As num
From courses
Group By class) As freq
Where num >=5;

##### Method 2. Use Distinct - consider duplicate <374 ms>
Select class
From courses
Group By class
Having Count(Distinct student) >= 5;



#### 597. Friend Requests I: Overall Acceptance Rate
##### Method 1. two window function - with cte1 and cte2 <391ms 80%>
With cte1 As 
(Select Count(Distinct requester_id, accepter_id) As accept
From FriendRequest f1 Right Join RequestAccepted r1
 On sender_id=requester_id 
 And send_to_id=accepter_id),
 cte2 As
 (Select Count(Distinct sender_id, send_to_id) As send
 From FriendRequest f2)
 

Select Round(Ifnull(accept/send,0),2) As accept_rate
 From cte1, cte2;

##### Method 2.
Select Round(
    IFNULL(
    (Select Count(*)
     From (Select Distinct requester_id, accepter_id 
           From RequestAccepted) As accept) /
    (Select Count(*)
     From (Select Distinct sender_id, send_to_id
           From FriendRequest) As send),0), 2) As accept_rate;




#### 603. Consecutive Available Seats
##### Method 1. Self Join
Select Distinct(c2.seat_id)
From cinema c1 Join cinema c2
On Abs(c2.seat_id-c1.seat_id)=1 
And c1.free=1 And c2.free=1
Order By seat_id ASC;

##### Method 2. Where 替代 self join, and (a=b+1 or b=a+1)
Select Distinct(c1.seat_id)
From cinema c1, cinema c2
Where c1.free=1 
And c2.free=1 
And (c1.seat_id = c2.seat_id+1 OR c1.seat_id+1 = c2.seat_id)
Order By seat_id ASC;



#### 607. Sales Person
##### Method 1. Multiple Join & Subquery & Not IN
Select s2.name
From Salesperson s2
Where s2.name NOT IN
(Select s1.name 
From Orders o1 Left Join Salesperson s1 Using(sales_id)
Left Join Company c1 Using(com_id)
Where c1.name="Red");

##### Method 2. Subquery & Not IN <62%>
Select s1.name
From salesperson s1
Where s1.sales_id NOT IN (Select o1.sales_id 
                          From orders o1 Join company c1 Using(com_id)
                          Where c1.name = "RED");


#### 610. Triangle Judgement
##### Method 1. Case When...And <94.31%>
Select*, (Case When x+y>z And x+z>y And y+z>x Then "Yes"
          Else "No" End) As triangle
From triangle;

##### Method 2. If
Select*, If(x+y>z And x+z>y And y+z>x,"Yes","No") As triangle
From triangle;



#### 613. Shortest Distance in a Line
##### Method 1. Min(Abs()), self join
Select Min(Abs(p1.x-p2.x)) As shortest
From point p1 Join point p2
On p1.x != p2.x;

##### Method 2. Where
Select Min(Abs(x1.x-x2.x)) As shortest
From point p1, point p2
Where p1.x != p2.x;


#### 619. Biggest Single Number
##### Method 1. cte
With cte As
(Select num, Count(num) As cnt
From my_numbers
Group By num)

Select Max(num) As num
From cte
Where cnt=1;

##### Method 2. Subquery
Select Max(num) As num
From (Select num
      From my_numbers
      Group By num
      Having Count(num)=1) As n1;





#### 620. Not Boring Movies
##### Method 1. Mod(column, 2) 餘數
Select*
From Cinema c1
Where Mod(id, 2)=1 And description != "boring"
Order By rating DESC;

##### Method 2. (id%2 > 0) 餘數
Select*
From Cinema c1
Where (id%2 > 0) And description NOT LIKE "%boring%"
Order By rating DESC;

#### 627. Swap Salary
##### Method 1. Update Table.name Set column=
Update Salary
Set Sex = Case When sex="m" Then "f" Else "m" End;

##### Method 2. If(column= , , ) <75%>
Update Salary
Set Sex = IF (sex = "m", "f", "m");





#### 1050. Actors and Directors Who Cooperated At Least Three Times
##### Method 1. <76%, 313ms>
Select actor_id, director_id
From ActorDirector
Group By actor_id, director_id
Having Count(*) >= 3
Order By Count(*) DESC;

##### Method 2. <92%, 293ms>
Select actor_id, director_id
From ActorDirector
Group By actor_id, director_id
Having Count(Distinct timestamp) >=3;




#### 1068. Product Sales Analysis I
##### Method 1.
Select product_name, year, price
From Sales s1 Left Join Product p1 Using(product_id);

##### Method 2. subquery and distinct - because multiple product_id in sales table
Select Product_name, year, price
From Product Join (Select Distinct(product_id), year, price
                   From Sales) As s1
Using (product_id);


#### 1069. Product Sales Analysis II
##### Method 1. Distinct - because multiple product_id in Sales
Select Distinct(product_id), Sum(quantity) As total_quantity
From Sales
Group By product_id;

##### Method 2. <54.19%>
Select Distinct(product_id), Sum(quantity) As total_quantity
From Sales
Group By product_id
Having Sum(quantity)
Order By product_id;



