##  Window Function ##
# Rank #
📌 176. Second Highest Salary

# 解法1. 
Select Max(Salary) As SecondHighestSalary
From Employee
Where salary < (Select Max(Salary)
                From Employee) 

Select Max(Salary) As SecondHighestSalary
From Employee
Where Salary not in (Select Max(Salary) From Employee);

# 解法2.
With cte As
(Select *, Dense_Rank() Over (Order By Salary Desc) As rnk
From Employee)

Select Max(Salary) As SecondHighestSalary
From cte
Where rnk=2


# Nth Highest Rank #
📌 177. Nth Highest Salary
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      # Write your MySQL query statement below.
      Select Max(s.salary)
      From (Select Dense_Rank() Over (Order By Salary Desc) As drank, salary
           From Employee) As s
      Where s.drank = N
  );
END



📌 178. Rank Scores
Select score, Dense_Rank() Over (Order By Score Desc) As "rank"
From Scores



📌 180. Consecutive Numbers
Select Distinct(l1.num) As ConsecutiveNums
From Logs l1, Logs l2, Logs l3
Where l1.id-l2.id=1
And l2.id-l3.id=1
And l1.num-l2.num=0
And l2.Num - l3.Num = 0;
And l2.Num - l3.Num = 0;


📌 184. Department Highest Salary
解法1.
Select d1.name As Department, e1.name As Employee, salary
From Employee e1 Left Join Department d1 
On d1.id = e1.departmentId
Where (departmentId, salary) In
(Select departmentId, Max(salary)
From Employee
Group By departmentId)


解法2. rank()
Select d1.name As Department, e1.name As Employee, e1.salary
From department d1 Right Join 
(Select name, salary, Rank() Over (PARTITION BY departmentId Order By salary Desc) As rnk,departmentId
 From Employee) e1 
On d1.id=e1.departmentId
Where e1.rnk=1


📌 512. Game Play Analysis II
解法 1. 第一時刻想的方法絕對是錯的，要先找出min date, 在找device_id
Select player_id, device_id
From Activity
Where (player_id, event_date) In
(Select player_id, Min(event_date) As event_date
From Activity 
Group By player_id) 

解法 2. rank ()
With cte As
(Select*, Rank() Over(Partition By player_id Order By event_date ASC) As rnk
From Activity)

Select player_id, device_id
From cte
Where rnk =1




📌 1082. Sales Analysis I
解法 1.
With cte As
(Select seller_id, sum(price) As total, rank() Over(Order By sum(price) Desc) AS rnk
From Sales
Group By seller_id)

Select seller_id
From cte
Where rnk=1

📌 1070. Product Sales Analysis III
解法 1.
With cte As
(Select*, rank() over(Partition By product_id order By year ASC) As rnk
From Sales)

Select product_id, year As first_year, quantity, price
From cte
Where rnk =1

解法 2.
Select product_id, year As first_year, quantity, price
From Sales
Where (product_id, year) In (Select Sales.product_id, Min(year) As year
                             From Sales
                             Group By product_id)

📌 1112. Highest Grade For Each Student
解法 1.
With cte As
(Select*, rank() Over(Partition By student_id Order By grade Desc, course_id ASC) AS rnk
From Enrollments e1)

Select student_id, course_id, grade
From Cte
Where rnk =1

解法 2. 
Select student_id, Min(course_id) As course_id, grade
From Enrollments
Where (student_id, grade) In (Select student_id, Max(grade) As grade
                              From Enrollments
                              Group By student_id)
Group By student_id, grade
Order By student_id ASC;


#### Sum function combine with Over() function
📌 534. Game Play Analysis III
解法 1.
Select player_id, event_date, 
Sum(games_played) Over(Partition By player_id Order By event_date) As games_played_so_far 
From Activity

解法 2.
SELECT A1.player_id, A1.event_date, SUM(A2.games_played) as games_played_so_far
FROM Activity AS A1
JOIN Activity AS A2
ON A1.player_id = A2.player_id AND A1.event_date >= A2.event_date
GROUP BY A1.player_id, A1.event_date

📌 1204. Last Person to Fit in the Bus
解法 1.
With cte As
(Select person_name, Sum(weight) Over(Order By turn ASC) As Total_Weight 
From Queue)

Select person_name
From cte
Where Total_weight <= 1000
Order By Total_weight DESC
Limit 1

解法 2.
Select person_name
From (Select person_name, 
      Sum(weight) Over(Order By Turn ASC) As total_weight
      From Queue q1) As t1
Where total_weight <= 1000
Order By total_weight DESC
Limit 1;

📌 1308. Running Total for Different Genders
解法 1.
Select gender, day, Sum(score_points) Over(Partition By gender Order By day) As total
From Scores
Group By gender, day
Order By gender, day

解法 2.
Select s1.gender, s1.day, Sum(s1.score_points) Over(Partition By Gender Order By day) As total
From Scores s1 Join Scores s2 
On s1.day >= s2.day And s1.gender=s2.gender
Group By s1.gender, s1.day
Order By gender ASC, day ASC;
