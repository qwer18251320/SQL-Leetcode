# 612. Shortest Distance in a Plane
Select Min(Round(Sqrt(Pow(p1.x-p2.x,2)+Pow(p1.y-p2.y,2)),2)) As shortest
From point_2d p1, point_2d p2
Where p1.x != p2.x OR p1.y != p2.y;

Select Min(Round(Sqrt(Pow(p1.x-p2.x,2)+Pow(p1.y-p2.y,2)),2)) As shortest
From point_2d p1 Join point_2d p2
On p1.x != p2.x OR p1.y != p2.y;

## Power(x,y) or Pow(x,y) = x^y
## sqrt((x1-x2)^2+(y1-y2)^2)



# 1098. Unpopular Books
Select Books.book_id, name
From books
Where available_from  < "2019-05-23"
And book_id NOT IN (Select book_id
                    From Orders
                    Where dispatch_date Between "2018-06-23" 
                    And "2019-06-23"
                    Group By book_id
                    Having Sum(quantity) >= 10);

## some books available_from early than '2019-05-23', but no sales during '2018-06-23' and '2019-06-23' - group by cannot reflect those book sales



# 1112. Highest Grade For Each Student
Select student_id, Min(course_id) AS course_id, grade
From Enrollments
Where (student_id, grade) In (Select student_id, Max(grade) As grade
                              From Enrollments
                              Group By student_id)
Group By student_id, grade
Order By student_id ASC;

## Where (x,y) In (x,y)
Group By x, y


# 550. Game Play Analysis IV
Select Round(Count(Distinct a2.player_id) / (Select Count(Distinct player_id) From Activity),2) As fraction
From Activity a1 Left Join
(Select player_id, Min(event_date) As first_log
From Activity
Group By player_id) As a2
On a1.player_id = a2.player_id And DateDiff(event_date, first_log) = 1;

## find first logged in, Date diff




# 585. Investments in 2016
Select Round(Sum(TIV_2016),2) As TIV_2016
From insurance
Where TIV_2015 IN (Select TIV_2015
                  From insurance
                  Group By TIV_2015
                  Having Count(*)>1)
And (LAT,LON) IN (Select LAT, LON
                  From insurance 
                  Group By LAT, LON
                  Having Count(*) =1);
## two creteria, familar to use Where(x,y) IN (subquery)



# 1070. Product Sales Analysis III
Select Sales.product_id, year As first_year, quantity, price
From Sales
Where (product_id, year) IN (Select product_id, Min(year) As year
                            From Sales
                            Group By product_id);
                            
## familar to use Where(x,y) IN (subquery)




# 1132. Reported Posts II
Select Round(Avg(percent),2) As average_daily_percent
From
(Select Count(Distinct r1.post_id)/Count(Distinct a1.post_id)*100 As percent
From Actions a1 Left Join Removals r1 Using(post_id)
Where extra = "spam" And action ="report"
Group By action_date) As total;

## for 2019-07-04 only one psot_id 2 remove, total two distinct id 2 and 4



# 1174. Immediate Food Delivery II
Select Round(Count(customer_id)/(Select Count(Distinct customer_id) From Delivery)*100,2)
As immediate_percentage
From Delivery
Where (customer_id,order_date) IN
(Select customer_id, Min(order_date) As order_date
From Delivery
Group By customer_id)
And order_date = customer_pref_delivery_date;

## Where (x,y) In (subquery)




# 1212. Team Scores in Football Tournament
Select team_id, team_name, 
Sum(Case When team_id=host_team And host_goals>guest_goals Then 3 Else 0 End)+
Sum(Case When team_id=guest_team And guest_goals>host_goals Then 3 Else 0 End)+
Sum(Case When team_id=host_team And host_goals=guest_goals Then 1 Else 0 End)+
Sum(Case When team_id=guest_team And guest_goals=host_goals Then 1 Else 0 End) As num_points
From Teams Left Join Matches
On team_id = host_team Or team_id = guest_team
Group By team_id
Order By num_points DESC, team_id ASC;

## sum(case when ...)+sum(case when...) As





# 1158. Market Analysis I
Select user_id As buyer_id, join_date, IFNULL(num,0) As orders_in_2019
From
(Select user_id, join_date
From Users) As u1
Left Join 
(Select buyer_id, Count(*) As num
From Orders
Where Left(order_date,4) = 2019
Group By buyer_id) As o1
On user_id = buyer_id;

## two subquery, ifnull



# 1264. Page Recommendations
# method 1
Select Distinct(page_id) As recommended_page
From 
(Select Case When user1_id = 1 Then user2_id
When user2_id = 1 Then user1_id End As user_id From Friendship) As f1
Join Likes Using(user_id)
Where page_id Not In
(Select page_id
From Likes
Where user_id = 1);
# method 2
Select Distinct(page_id) As recommended_page
From Likes
Where user_id IN
(Select user2_id As user_id
From Friendship 
Where user1_id = 1
Union All
Select user1_id As user_id
From Friendship
Where user2_id = 1)
And page_id NOT IN 
(Select page_id
From Likes
Where user_id = 1);


#1205. Monthly Transactions II
# Write your MySQL query statement below
Select Left(trans_date,7) As month, country, 
Sum(state="approved") As approved_count,
Sum(Case When state="approved" Then amount Else 0 End) As approved_amount,
Sum(state="chargebacks") As chargeback_count,
Sum(Case When state="chargebacks" Then amount Else 0 End) As chargeback_amount
From
(Select Distinct(trans_id) As id, country, "chargebacks" As State, amount, c1.trans_date
From Transactions t1 Right Join Chargebacks c1
On id = trans_id
Union All
Select* From Transactions) As t2
Group By month, country
HAVING approved_count>0 OR chargeback_count>0;
## sum(column="xxx")
## HAVING approved_count>0 OR chargeback_count>0, keep out zero count rows


#1440. Evaluate Boolean Expression
# Write your MySQL query statement below
Select e1.left_operand, e1.operator, e1.right_operand,
(Case When v1.value < v2.value And e1.operator = "<" Then "true"
When v1.value > v2.value And e1.operator = ">" Then "true"
When v1.value = v2.value And e1.operator = "=" Then "true"
Else "false" End) As value
From Expressions e1 Join Variables v1
On e1.left_operand = v1.name
Join Variables v2
On e1.right_operand = v2.name;


## join two times


#1532. The Most Recent Three Orders
Select name As customer_name, c1.customer_id, o1.order_id, o1.order_date
From customers c1 
Join Orders o1 On c1.customer_id = o1.customer_id
Join Orders o2 On o1.customer_id = o2.customer_id 
And o1.order_date <= o2.order_date
Group By customer_name, o1.customer_id, o1.order_id, o1.order_date
Having Count(*)<=3
Order By 1 ASC, 2 ASC, o1.order_date DESC;

## join three table
## group by 很多個, 才會顯示全部, 如果只group by id 那只會每個id各顯示一個output


# 1501. Countries You Can Safely Invest In
Select country
From
(Select c1.name As country, Avg(t1.duration) As avg_dur
From Person p1 
Join Country c1 On Left(phone_number,3) = country_code
Join 
(Select caller_id as id, duration 
From Calls
Union All
Select callee_id as id, duration
From Calls) As t1 On p1.id = t1.id
Group By country) As g1,
(Select Avg(duration) As global_dur
From Calls) As g2
Where avg_dur > global_dur;

## need to be simplified



#1783. Grand Slam Titles
Select player_id, player_name, 
Sum(Wimbledon = player_id)+Sum(Fr_open = player_id)+Sum(US_open = player_id)+Sum(Au_open = player_id) As grand_slams_count 
From Players Join Championships 
On Wimbledon = player_id Or Fr_open = player_id Or US_open = player_id
Or Au_open = player_id
Group By player_id;

## Sum(xxx)+Sum(xxx)
## Join xxx On xxx=yy or xxx=zzz 


# 1549. The Most Recent Orders for Each Product
Select product_name, o1.product_id, order_id, order_date
From Products p1 Right Join Orders o1 Using(Product_id)
Where (product_name,order_date) IN 
(Select product_name, Max(order_date) As order_date
From Products p1 Right Join Orders o1 Using(Product_id)
Group By o1.product_id)
Order By product_name ASC, product_id ASC, Order_id ASC;

#1715. Count Apples and Oranges
Select Sum(a1+a2) As apple_count, Sum(o1+o2) As orange_count
From
(Select IfNull(b1.chest_id, null), b1.apple_count As a1, b1.orange_count As o1, IfNull(c1.apple_count,0) As a2, IfNull(c1.orange_count,0) As o2
From Boxes b1 Left Join Chests c1 Using(chest_id)) As t1;



#1831. Maximum Transaction Each Day
Select transaction_id
From Transactions
Where (Left(day,10),amount) IN
(Select Left(day,10), Max(amount) As amount
From Transactions t1
Group By Left(day,10))
Order By transaction_id ASC;




#1907. Count Salary Categories
####
Select "Low Salary" AS Category, 
Sum(Case When income < 20000 Then 1 Else 0 End) As accounts_count
From Accounts
Union
Select "Average Salary" AS Category, 
Sum(Case When income >= 20000 And income <= 50000 Then 1 Else 0 End) As accounts_count
From Accounts
Union
Select "High Salary" AS Category, 
Sum(Case When income > 50000 Then 1 Else 0 End) As accounts_count
From Accounts;

# Point: average salary is 0: 
#Select Category, Count(*) As accounts_count
#From
#(Select account_id, 
#(Case When income < 20000 Then "Low Salary"
#When income > 50000 Then "High Salary"
#Else "Average Salary" End) As Category
#From Accounts) As a1
#Group By category
## doesn't work


#1204. Last Person to Fit in the Bus
Select person_name
From(Select person_name, Sum(weight) Over(Order By Turn ASC) As total_weight
From Queue q1) As t1
Where total_weight <= 1000
Order By total_weight DESC
Limit 1;


## sum(weight) Over (Order By Turn ASC)-follow the Turn to sum the weight
## then find the name clostest to 1000
### 要按照"順序" row_number() 加減, 就用window function






# 1285. Find the Start and End Number of Continuous Ranges
Select Min(log_id) As start_id, Max(log_id) As end_id
From (Select log_id, ROW_NUMBER() Over(Order By log_id) As num
      From Logs) As l1
Group By (log_id-num);

## Use to rank the order
## Select log_id, ROW_NUMBER() Over(Order By log_id) As num From Logs
## 1, 1, 0
## 2, 2, 0
## 3, 3, 0
## 7, 4, 3
## 8, 5, 3
## 10, 6, 4
### Group By(log_id-num) = 0,3,4
