📌 1440. Evaluate Boolean Expression
解法 1.
With cte As(
Select left_operand, v1.value As left_value, operator, right_operand, v2.value As right_value
From Expressions e1 Left Join Variables v1 On v1.name=left_operand
Left Join Variables v2 On v2.name=right_operand)

Select left_operand, operator, right_operand,
(Case When operator=">" And left_value > right_value Then "true"
When operator="<" And left_value < right_value Then "true"
When operator="=" And left_value = right_value Then "true"
Else "false" End) As value
From cte

解法 2.
Select left_operand, operator, right_operand,
(Case When operator=">" And v1.value > v2.value Then "true"
When operator="<" And v1.value < v2.value Then "true"
When operator="=" And v1.value = v2.value Then "true"
Else "false" End) As value
From Expressions e1 Left Join Variables v1 On v1.name=left_operand
Left Join Variables v2 On v2.name=right_operand



📌 1445. Apples & Oranges
解法 1.
With cte1 As
(Select sale_date, sold_num As apples
From Sales
Where fruit="apples"),
cte2 As
(Select sale_date, sold_num As oranges
From Sales
Where fruit="oranges")

Select cte1.sale_date, (apples-oranges) As diff
From cte1 Left Join cte2 Using(sale_date)
Order By cte1.sale_date ASC


解法 2. 
With cte1 As
(Select sale_date, sold_num As apples
From Sales
Where fruit="apples"),
cte2 As
(Select sale_date, sold_num As oranges
From Sales
Where fruit="oranges")

Select cte1.sale_date, (apples-oranges) As diff
From cte1 Left Join cte2 Using(sale_date)


解法 3.
Select s1.sale_date, apples - oranges As diff
From
(Select sale_date, sold_num As apples
From Sales
Where fruit = "apples") As s1
Join
(Select sale_date, sold_num As oranges
From Sales
Where fruit = "oranges") As s2
Using(sale_date)
Order By sale_date ASC;



📌 1158. Market Analysis I

# Left Join 結合 and year
Select u1.user_id As buyer_id, u1.join_date, Count(o1.order_id) As orders_in_2019
From Orders o1 Right Join Users u1 
On o1.buyer_id = u1.user_id
And Year(o1.order_date) = "2019"
Group By u1.user_id

# Left(column, 4) = year
Select user_id As buyer_id, join_date, IFNULL(num,0) As orders_in_2019
From
(Select user_id, join_date
From Users) As u1
Left Join 
(Select buyer_id, Count(*) As num
From Orders
Where Left(order_date,4) = 2019
Group By buyer_id) As o1
On user_id = buyer_id;





📌 1393. Capital Gain/Loss
# 解法1.
Select stock_name, Sell+Buy As capital_gain_loss
From(
Select stock_name, Sum(price) As Sell
From Stocks
Where operation = "Sell"
Group By stock_name) As tot1 
Left Join
(Select stock_name, -Sum(price) As Buy
From Stocks
Where operation = "Buy"
Group By stock_name) As tot2
Using(stock_name)


# 解法2. 簡單的 sum if 
SELECT stock_name, SUM(IF(operation='Buy',-price,price)) capital_gain_loss 
FROM Stocks
GROUP BY stock_name


# 解法3. case when
Select stock_name, Sum(
    case when operation = 'Buy' Then -price
    when operation = 'Sell' Then price
    end) as capital_gain_loss
From Stocks
group by stock_name


📌 1045. Customers Who Bought All Products
解法 1.
With cte As
(Select customer_id, Count(Distinct product_key) As cnt
 From Customer c1
Group By customer_id)

Select customer_id 
From cte
Where cnt = (Select Count(Distinct Product_key) As num
             From Product)
             
解法 2.
Select customer_id
From (Select customer_id, Count(Distinct product_key) As cnt
      From Customer c1
      Group By customer_id) As c1
Where cnt = (Select Count(Distinct Product_key) As num
             From Product)

📌 1149. Article Views II
Select Distinct(viewer_id) As id
From Views
Group By viewer_id, view_date
Having Count(Distinct article_id) > 1
Order By viewer_id ASC

📌 1174. Immediate Food Delivery II
解法 1.
With cte As
(Select *, 
(Case When order_date = customer_pref_delivery_date Then "Immediate" Else "Scheduled" End) As type, 
Rank() Over(Partition By customer_id Order By order_date ASC) As rnk
From Delivery)

Select Round(Sum(type="Immediate")/Count(*)*100,2) As immediate_percentage
From cte
Where rnk=1

解法 2. 
Select Round(Count(customer_id)/(Select Count(Distinct customer_id) From Delivery)*100,2)
As immediate_percentage
From Delivery
Where (customer_id,order_date) IN
(Select customer_id, Min(order_date) As order_date
From Delivery
Group By customer_id)
And order_date = customer_pref_delivery_date;

📌 1193. Monthly Transactions I
解法 1.
Select Left(trans_date,7) As month, Country, Count(*) As trans_count, Sum(state="approved") As approved_count, Sum(amount) As trans_total_amount, Sum(Case When state="approved" Then amount Else 0 End) As approved_total_amount
From Transactions
Group By country, Left(trans_date,7)

解法 2. 


📌 1077. Project Employees III
解法 1.
With cte As
(Select project_id, Max(experience_years) As experience_years
From Project p1 Left Join Employee e1 Using(employee_id)
Group By project_id)

Select p1.project_id, e1.employee_id
From Project p1 Right Join Employee e1 Using(employee_id)
Where (project_id, experience_years) In (Select project_id, experience_years
                         From cte)
                         
解法 2. 
Select p1.project_id, p1.employee_id
From (Select* From Project Left Join Employee Using (employee_id)) As p1,
(Select project_id, Max(experience_years) As years 
 From Project Left Join Employee Using (employee_id) 
 Group By project_id) As p2
Where p1.project_id = p2.project_id
And p1.experience_years = p2.years;

📌 1107. New Users Daily Count
解法 1.
With cte As
(Select user_id, Min(activity_date) As activity_date
 From Traffic
 Where activity="login"
 Group By user_id)
 
Select activity_date As login_date, Count(*) As user_count
From cte
Where Datediff("2019-06-30",activity_date)<=90
Group By activity_date
 
解法 2.
Select Distinct(login_date), Count(user_id) As user_count 
From (Select user_id, Min(activity_date) As login_date
      From Traffic
      Where activity = "login"
      Group By user_id) As t1
Where Datediff("2019-06-30", login_date) <= 90
Group By login_date;

📌 1126. Active Businesses
解法 1.
With cte As
(Select event_type, Avg(occurences) As num
From Events
Group By event_type)

Select e1.business_id
From Events e1 Left Join cte
Using(event_type)
Where e1.occurences > num
Group By e1.business_id
Having Count(Distinct e1.event_type)>1

解法 2. 
Select business_id
From events e1 Left Join (Select event_type, Avg(occurences) As average 
                          From events
                          Group By event_type) As e2
On e1.event_type = e2.event_type
Where e1.occurences > average 
Group By business_id
Having Count(e1.event_type) >1;

📌 1364. Number of Trusted Contacts of a Customer
Select invoice_id, customer_name, price, Ifnull(Count(contact_email),0) As contacts_cnt, 
IFNULL(Sum(Case When contact_name In (Select Distinct customer_name From Customers) Then 1 Else 0 End),0) As trusted_contacts_cnt
From Invoices i1 Left Join Contacts c1 Using(user_id)
Join Customers c2 On customer_id = user_id
Group By invoice_id, i1.user_id
Order By invoice_id;

📌 1468. Calculate Salaries
解法 1.
With cte As
(Select company_id, Max(salary) As maxx, 
(Case When Max(salary) < 1000 Then 0
When Max(salary) > 10000 Then 49
Else 24 End) As tax
From Salaries
Group By company_id)

Select company_id, employee_id, employee_name, Round(salary-((tax/100)*salary),0) As salary
From Salaries Left Join cte Using(company_id)

解法 2. 
Select s1.company_id, employee_id,employee_name, Round(salary*tax,0) As salary
From Salaries s1 Left Join (Select company_id, 
                         (Case When Max(salary) < 1000 Then 1
                          When Max(salary) >= 10000 Then 0.51
                          Else 0.76 End) As tax
                         From Salaries
                         Group By company_id) As s2
Using(company_id);

📌 1164. Product Price at a Given Date
解法 1.
With cte As
(Select product_id, new_price As price
From Products p1
Where (product_id, change_date) In (Select product_id, Max(change_date) As change_date
                                    From Products
                                    Where change_date <= "2019-08-16"
                                    Group By product_id))

Select p2.Product_id, Ifnull(price,10) As price
From Products p2 Left Join cte Using(product_id)
Group By p2.product_id 

解法 2. 
Select p1.product_id, IfNull(p2.new_price,10) As price
From (Select Distinct product_id From Products) As p1
Left Join (Select product_id, new_price
          From Products
          Where (product_id, change_date) In (Select product_id, Max(change_date) As last_date
                                              From Products
                                              Where change_date <= "2019-08-16"
                                              Group By product_id)) As p2
On p1.product_id = p2.product_id;

📌 1205. Monthly Transactions II
Select Left(trans_date,7) As month, country, Sum(state="approved") As approved_count,
Sum((Case When state="approved" Then amount Else 0 End)) As approved_amount,
Sum(state="chargebacks") As chargeback_count,
Sum(Case When state="chargebacks" Then amount Else 0 End) As chargeback_amount
From (Select Distinct(trans_id) As id, country, "chargebacks" As state, amount, c1.trans_date
      From Chargebacks c1 Left Join Transactions On id=trans_id
      Union All
      Select*
      From transactions) As t2
Group By Left(trans_date,7), country
Having approved_count>0 Or chargeback_count>0

📌 1212. Team Scores in Football Tournament
解法 1. 
Select team_id, team_name, 
Sum(Case When team_id=host_team And host_goals>guest_goals Then 3 Else 0 End)+
Sum(Case When team_id=guest_team And guest_goals>host_goals Then 3 Else 0 End)+
Sum(Case When team_id=host_team And host_goals=guest_goals Then 1 Else 0 End)+
Sum(Case When team_id=guest_team And guest_goals=host_goals Then 1 Else 0 End) As num_points
From Teams Left Join Matches
On team_id = host_team Or team_id = guest_team
Group By team_id
Order By num_points DESC, team_id ASC;

解法 2.
With cte As
(Select host_team, guest_team, host_goals, guest_goals, 
 (Case When host_goals > guest_goals Then 3 
 When host_goals = guest_goals Then 1
 Else 0 End) As host_points,
 (Case When host_goals < guest_goals Then 3 
 When host_goals = guest_goals Then 1
 Else 0 End) As guest_points
 From Matches)
 
 Select team_id, team_name, Ifnull(Sum(num),0) As num_points
 From Teams t1 Left Join (Select host_team As team_id, host_points As num
                           From cte
                           Union All
                           Select guest_team As team_id, guest_points As num
                           From cte) As t2
Using (team_id)
Group By team_id
Order By num_points Desc, team_id ASC


📌 1264. Page Recommendations
解法 1. 
With cte As
(Select user1_id As user_id 
From Friendship
Where user2_id = 1
Union All
Select user2_id As user_id
From Friendship
Where user1_id = 1)


Select Distinct(page_id) As recommended_page
From Likes l1
Where user_id IN (Select user_id
                 From cte)
And page_id Not In (Select page_id From Likes Where user_id=1)

解法 2. 
Select Distinct(page_id) As recommended_page
From 
(Select Case When user1_id = 1 Then user2_id
When user2_id = 1 Then user1_id End As user_id From Friendship) As f1
Join Likes Using(user_id)
Where page_id Not In
(Select page_id
From Likes
Where user_id = 1);

📌 1270. All People Report to the Given Manager
解法 1.
With cte As
(Select employee_id
From Employees 
Where manager_id = 1
And employee_id != 1)

Select employee_id
From Employees 
Where manager_id In (Select employee_id
                     From Employees
                     Where manager_id In (Select employee_id From cte)
                     Or employee_id In (Select employee_id From cte))
Or employee_id In (Select employee_id From cte)

解法 2. 
Select e1.employee_id
From Employees e1, Employees e2, Employees e3
Where e1.manager_id = e2.employee_id
And e2.manager_id = e3.employee_id
And e3.manager_id = 1 
And e1.employee_id != 1;

📌 1501. Countries You Can Safely Invest In
解法 1. 
With cte As
(Select c1.name As country, avg(duration) As avg_dur
From
(Select caller_id As id, duration
From Calls
Union
Select callee_id As id, duration
From Calls) As c2
Join Person p1 Using(id)
Join Country c1 On Left(phone_number,3)=country_code
Group By c1.name)

Select Distinct(country)
From Calls c3, cte
Where avg_dur > (Select avg(duration)
                From Calls)
                
解法 2. 
Select country
From
(Select c1.name As country, Avg(t1.duration) As avg_dur
From Person p1 
Join Country c1 On Left(phone_number,3) = country_code
Join 
(Select caller_id as id, duration 
From Calls
Union All
Select callee_id as id, duration
From Calls) As t1 On p1.id = t1.id
Group By country) As g1,
(Select Avg(duration) As global_dur
From Calls) As g2
Where avg_dur > global_dur;

📌 1532. The Most Recent Three Orders
解法 1. 
With cte As
(Select name As customer_name, o1.customer_id, order_id, order_date, Rank() Over(Partition By customer_id Order By order_date DESC) As rnk
From Orders o1 Left Join Customers c1 Using(customer_id))

Select customer_name, customer_id, order_id, order_date
From cte
Where rnk<=3
Order By customer_name ASC, customer_id ASC, order_date DESC

解法 2. 
Select name As customer_name, c1.customer_id, o1.order_id, o1.order_date
From customers c1 
Join Orders o1 On c1.customer_id = o1.customer_id
Join Orders o2 On o1.customer_id = o2.customer_id 
And o1.order_date <= o2.order_date
Group By customer_name, o1.customer_id, o1.order_id, o1.order_date
Having Count(*)<=3
Order By 1 ASC, 2 ASC, o1.order_date DESC;

📌 1549. The Most Recent Orders for Each Product
解法 1. 
With cte As
(Select p1.product_name, p1.product_id, order_id, order_date, dense_rank() Over(Partition By product_id Order By order_date DESC) As rnk
From Orders o1 Left Join Products p1 Using(product_id))

Select product_name, product_id, order_id, order_date
From cte 
Where rnk = 1
Order By product_name ASC, product_id ASC, order_id ASC

解法 2. 
Select product_name, o1.product_id, order_id, order_date
From Products p1 Right Join Orders o1 Using(Product_id)
Where (product_name,order_date) IN 
(Select product_name, Max(order_date) As order_date
From Products p1 Right Join Orders o1 Using(Product_id)
Group By o1.product_id)
Order By product_name ASC, product_id ASC, Order_id ASC;

📌 1555. Bank Account Summary
解法 1.
With cte As
(Select user_id, Sum(money) As credit
From
(Select paid_by As user_id, -amount As money
From Transactions
Union All
Select paid_to As user_id, amount As money
From Transactions) As t1
Group By user_id)

Select u1.user_id, u1.user_name, Ifnull(u1.credit+cte.credit, u1.credit) As credit,
(Case When u1.credit+cte.credit<0 Then "Yes" Else "No" End) As credit_limit_breached
From Users u1 Left Join cte Using(user_id)

解法 2.
Select USER_ID, USER_NAME, IfNull(Sum(Case When u1.user_id=t1.paid_by Then -amount Else amount End),0)+credit As CREDIT,
(Case When IfNull(Sum(Case When u1.user_id=t1.paid_by Then -amount Else amount End),0)+credit< 0 Then "Yes" Else "No" End) As CREDIT_LIMIT_BREACHED
From Users u1 Left Join Transactions t1
On u1.user_id = t1.paid_by 
Or u1.user_id = t1.paid_to
Group By u1.user_id;

📌 1715. Count Apples and Oranges
解法 1.
With cte As
(Select box_id, 
Ifnull(b1.apple_count,0)+ifnull(c1.apple_count,0) As apple_count,
Ifnull(b1.orange_count,0)+ifnull(c1.orange_count,0) As orange_count
From Boxes b1 Left Join Chests c1 Using(chest_id))

Select Sum(apple_count) As apple_count, Sum(orange_count) As orange_count
From cte

解法 2.
Select Sum(a1+a2) As apple_count, Sum(o1+o2) As orange_count
From
(Select IfNull(b1.chest_id, null), b1.apple_count As a1, b1.orange_count As o1, IfNull(c1.apple_count,0) As a2, IfNull(c1.orange_count,0) As o2
From Boxes b1 Left Join Chests c1 Using(chest_id)) As t1;

📌 1355. Activity Participants
With cte As
(Select activity, Count(*) As num
From Friends
Group By activity)

Select Distinct(activity)
From cte
Where num NOT IN (Select Max(num) From cte)
And num NOT IN (Select Min(num) From cte)

📌 1699. Number of Calls Between Two Persons
解法 1. 
With cte As
(Select from_id As person1, to_id As person2, duration
From Calls
Where from_id < to_id
Union All
Select to_id As person1, from_id As person2, duration
From Calls
Where from_id > to_id)

Select person1, person2, Count(*) As call_count, Sum(duration) As total_duration
From cte
Group By person1, person2

解法 2.
Select person1, person2, Count(*) As call_count, Sum(duration) As total_duration
From (Select from_id As person1, to_id As person2, duration
      From Calls
      Where from_id < to_id
      Union All
      Select to_id As person1, from_id As person2, duration
      From Calls
      Where from_id > to_id) As c1
Group By person1, person2

📌 1783. Grand Slam Titles
解法 1.
With cte As
(Select wimbledon As player_id
From Championships
Union All
Select Fr_open As player_id
From Championships
Union All
Select US_open As player_id
From Championships
Union All
Select Au_open As player_id
From Championships)

Select player_id, player_name, Count(*) As grand_slams_count
From cte Left Join players Using(player_id)
Group By player_id

解法 2. 
Select player_id, player_name, 
Sum(Wimbledon = player_id)+Sum(Fr_open = player_id)+Sum(US_open = player_id)+Sum(Au_open = player_id) As grand_slams_count 
From Championships c1 Left Join players p1 
On Wimbledon = player_id Or Fr_open = player_id Or US_open = player_id
Group By player_id

解法 3. 
Select player_id, player_name, 
Sum((Case When c1.Wimbledon = player_id Then 1 Else 0 End)+
(Case When c1.Fr_open = player_id Then 1 Else 0 End)+
(Case When c1.US_open = player_id Then 1 Else 0 End)+
(Case When c1.Au_open = player_id Then 1 Else 0 End)) As grand_slams_count 
From Championships c1 Join players p1 
On c1.Wimbledon = player_id 
Or c1.Fr_open = player_id 
Or c1.US_open = player_id
Or c1.Au_open = player_id
Group By player_id

📌 1831. Maximum Transaction Each Day
解法 1.
With cte As
(Select transaction_id, day, amount, Dense_rank() Over(Partition By Day(day) Order By amount DESC) As rnk
From Transactions t1)

Select transaction_id
From cte
Where rnk=1
Order By transaction_id ASC

解法 2. 
Select transaction_id
From Transactions t1
Where (Day(day), amount) In (Select Day(day), Max(amount) As amount
                          From Transactions t2
                          Group By Day(day))
Order By transaction_id ASC

📌 1867. Orders With Maximum Quantity Above Average
解法 1. 
With cte As
(Select order_id, Avg(quantity) As avg_quan, Max(quantity) As max_quan
From OrdersDetails o1
Group By order_id)

Select order_id
From cte
Where max_quan > (Select Max(avg_quan)
                 From cte)

解法 2. 
Select Distinct order_id
From OrdersDetails o1
Group By order_id
Having Max(quantity) > (Select Max(avg_quan)
                       From (Select order_id, Avg(quantity) As avg_quan
                            From OrdersDetails
                            Group By order_id) As o1)

📌 1875. Group Employees of the Same Salary
解法 1. 
With cte As
(Select Distinct(salary) As salary, Dense_rank() Over (Order By salary) As team_id
From Employees
Group By salary
Having Count(*) >= 2)

Select employee_id, name, salary, team_id
From cte Left Join Employees Using(salary)
Order By team_id ASC, employee_id ASC

解法 2. 
Select*, Dense_Rank() Over(Order By salary) As team_id
From Employees
Where salary In
(Select salary
From Employees
Group By salary
Having count(*)>=2);



📌 1907. Count Salary Categories
解法 1. 
Select "Low Salary" As category, Sum(Case When income <20000 Then 1 Else 0 End) As accounts_count
From Accounts
Union All 
Select "High Salary" As category, Sum(Case When income >50000 Then 1 Else 0 End) As accounts_count
From Accounts
Union All 
Select "Average Salary" As category, Sum(Case When income Between 20000 and 50000 Then 1 Else 0 End) As accounts_count
From Accounts

解法 2. 
With cte1 As (
Select "Low Salary" As category
UNION
Select "High Salary" As category
UNION
Select "Average Salary" As category),
cte2 As(
Select account_id, (Case When income < 20000 Then 'Low Salary'
                    When income > 50000 then 'High Salary'
                    Else 'Average Salary' End) As category
From Accounts)
    
Select cte1.category, Ifnull(Count(cte2.account_id),0) As accounts_count 
From cte1 Left Join cte2 Using(category)
Group By cte1.category




📌 1934. Confirmation Rate
解法 1. 
Select s1.user_id, Ifnull(Round(Sum(Case When action="confirmed" Then 1 Else 0 End)/Count(*),2),0) As confirmation_rate
From Signups s1 Left Join Confirmations c1 Using(user_id)
Group By s1.user_id

解法 2. 
With cte As
(Select user_id, Round(Sum(action="confirmed")/Count(*),2) As cnt
 From Confirmations
 Group By user_id)
 
 Select s1.user_id, Ifnull(cnt,0) As confirmation_rate
 From Signups s1 Left Join cte Using(user_id)
 Group By s1.user_id

📌 1398. Customers Who Bought Products A and B but Not C
解法 1.
Select Distinct(o1.customer_id), customer_name
From Orders o1 Left Join Customers c1 Using(customer_id)
Where o1.customer_id In (Select customer_id From Orders Where product_name = "A")
And o1.customer_id In (Select customer_id From Orders Where product_name = "B")
And o1.customer_id Not In (Select customer_id From Orders Where product_name = "C")
Order By o1.customer_id



